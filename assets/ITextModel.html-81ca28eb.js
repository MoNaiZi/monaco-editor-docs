import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as l,b as a}from"./app-8d5f4333.js";const e={},o=a(`<h1 id="itextmodel" tabindex="-1"><a class="header-anchor" href="#itextmodel" aria-hidden="true">#</a> ITextModel</h1><p><code>Interface</code> 使用很高频的一个模型</p><h2 id="applyedits" tabindex="-1"><a class="header-anchor" href="#applyedits" aria-hidden="true">#</a> applyEdits</h2><ul><li>语法 applyEdits(operations: IIdentifiedSingleEditOperation[]): void</li><li>参数 operations</li><li>返回值 -</li><li>描述: 用于将一组文本编辑应用于模型。该方法接受一个编辑操作数组和一个选项对象作为参数，并返回一个IMarkerData数组，其中包含所有已插入的标记的位置和数据。</li></ul><div class="hint-container tip"><p class="hint-container-title">operations</p><p>operations参数是一个IIdentifiedSingleEditOperation类型的数组，用来描述操作的类型。它包含以下属性：</p><ul><li>forceMoveMarkers: bool类型，表示用于控制是否强制移动标记 markers。标记是一段文本的注释，通常用于标记某些位置或者标记某些文本的属性。当文本被修改时，标记也会相应地被修改。如果 forceMoveMarkers属性为 true，那么当文本被修改时，标记也会被强制移动，即它们会被重新计算并移动到新的位置。如果 forceMoveMarkers属性为 false，那么标记不会被强制移动，而是保持原来的位置。在一些情况下，如果文本被修改了，标记的位置可能已经发生了变化，这时如果不强制移动标记，可能会导致标记的位置不准确或者出现错误。因此，如果需要保证标记的位置准确性，可以将 forceMoveMarkers属性设置为 true。</li><li>range: IRange类型，表示替换的范围。这可以为空以模拟简单的插入。</li><li>text: string类型，表示要替换为的文本。这可以为 null以模拟简单的删除。</li></ul></div><p>以下是一个示例代码，演示如何使用 applyEdits方法将文本编辑应用于模型：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">editor</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">monaco</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">editor</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementById</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;container&quot;</span><span style="color:#D4D4D4;">), {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">value:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Hello, world!&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">language:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;javascript&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">model</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">editor</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getModel</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">edits</span><span style="color:#D4D4D4;"> = [</span></span>
<span class="line"><span style="color:#D4D4D4;">  {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">range:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">monaco</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Range</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">text:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Hello&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">  {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">range:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">monaco</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Range</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">6</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">text:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Monaco&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">markerData</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">model</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">applyEdits</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">edits</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">markerData</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们首先创建了一个编辑器实例，并获取了其模型。然后，我们定义了一个编辑操作数组，其中包含两个文本编辑操作。最后，我们使用 applyEdits方法将编辑操作应用于模型，并将返回的 <code>IMarkerData</code>数组打印到控制台中。 需要注意的是，applyEdits方法返回的 IMarkerData数组包含所有已插入的标记的位置和数据。如果您不想插入标记，可以将 IMarkerData数组作为第二个参数传递给 applyEdits方法，并将其设置为 <code>null</code>。</p><h2 id="createsnapshot" tabindex="-1"><a class="header-anchor" href="#createsnapshot" aria-hidden="true">#</a> createSnapshot</h2><ul><li>语法 createSnapshot(): number</li><li>参数 -</li><li>返回值 number</li><li>描述: 创建一个模型的快照，并返回该快照的 ID。快照是一段时间点的模型状态，可以用于撤销和重做操作。</li></ul><p>以下是一个示例代码，演示如何使用 createSnapshot 方法创建一个模型的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">editor</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">monaco</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">editor</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementById</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;container&quot;</span><span style="color:#D4D4D4;">), {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">value:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Hello, world!&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">language:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;javascript&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">model</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">editor</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getModel</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">snapshotId</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">model</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createSnapshot</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">snapshotId</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们首先创建了一个编辑器实例，并获取了其模型。然后，我们使用 createSnapshot 方法创建一个模型的快照，并将返回的快照 ID 打印到控制台中。</p><p>需要注意的是，创建快照后，模型的状态将被锁定，直到调用 dispose 方法释放该快照。</p><h2 id="deltadecorations" tabindex="-1"><a class="header-anchor" href="#deltadecorations" aria-hidden="true">#</a> deltaDecorations</h2><ul><li><p>语法 deltaDecorations(oldDecorations: string[], newDecorations: IDecorationOptions[]): string[]</p></li><li><p>参数:</p><ul><li>oldDecorations: string[]类型，表示要修改的装饰器 ID 数组。</li><li>newDecorations: <code>IDecorationOptions[]</code> 类型，表示要添加或修改的装饰器选项数组。</li></ul></li><li><p>返回值 string[] 类型，表示修改后的装饰器 ID 数组。</p></li><li><p>描述: 用于修改模型中的装饰器。该方法接受两个参数，分别是要修改的装饰器 ID 数组和要添加或修改的装饰器选项数组。该方法返回一个数组，其中包含修改后的装饰器 ID 数组。</p></li></ul><p>以下是一个示例代码，演示如何使用 deltaDecorations 方法修改模型中的装饰器：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">editor</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">monaco</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">editor</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementById</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;container&quot;</span><span style="color:#D4D4D4;">), {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">value:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Hello, world!&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">language:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;javascript&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">model</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">editor</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getModel</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">oldDecorations</span><span style="color:#D4D4D4;"> = [</span></span>
<span class="line"><span style="color:#D4D4D4;">  {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">range:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">monaco</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Range</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">options:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">inlineClassName:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;inline-class-name&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">newDecorations</span><span style="color:#D4D4D4;"> = [</span></span>
<span class="line"><span style="color:#D4D4D4;">  {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">range:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">monaco</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Range</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">options:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">inlineClassName:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;new-inline-class-name&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">newDecorationsIds</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">model</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">deltaDecorations</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">oldDecorations</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">newDecorations</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">newDecorationsIds</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们首先创建了一个编辑器实例，并获取了其模型。然后，我们定义了一个要修改的装饰器选项数组和一个要添加或修改的装饰器选项数组。最后，我们使用 deltaDecorations 方法修改模型中的装饰器，并将返回的修改后的装饰器 ID 数组打印到控制台中。</p><p>需要注意的是， deltaDecorations 方法可以用于添加、删除或修改模型中的装饰器。如果要删除装饰器，可以将要修改的装饰器 ID 数组设置为一个空数组。</p><h2 id="dispose" tabindex="-1"><a class="header-anchor" href="#dispose" aria-hidden="true">#</a> dispose</h2><ul><li>语法 dispose(): void</li><li>参数 -</li><li>返回值 -</li><li>描述: 释放模型和编辑器实例。释放模型和编辑器实例后，它们将不再可用。</li></ul><p>以下是一个示例代码，演示如何使用 dispose 方法释放模型和编辑器实例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">editor</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">monaco</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">editor</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementById</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;container&quot;</span><span style="color:#D4D4D4;">), {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">value:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Hello, world!&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">language:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;javascript&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">model</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">editor</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getModel</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#9CDCFE;">model</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">dispose</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#9CDCFE;">editor</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">dispose</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们首先创建了一个编辑器实例，并获取了其模型。然后，我们使用 dispose 方法释放模型和编辑器实例。</p><p>需要注意的是，释放模型和编辑器实例后，它们将不再可用。如果您需要重新使用这些实例，请重新创建它们。</p><h2 id="findmatches" tabindex="-1"><a class="header-anchor" href="#findmatches" aria-hidden="true">#</a> findMatches</h2><ul><li>语法 findMatches(searchString: string, searchOnlyEditableRange: boolean, isRegex: boolean, matchCase: boolean, wordSeparators: string | null): IFindMatch[]</li><li>参数 searchString : string 类型，表示要查找的字符串。 searchOnlyEditableRange : boolean 类型，表示是否仅在可编辑范围内查找。 isRegex : boolean 类型，表示是否使用正则表达式进行查找。 matchCase : boolean 类型，表示是否区分大小写。 wordSeparators : string | null 类型，表示单词分隔符。 返回值 IFindMatch[] 类型，表示查找结果。</li><li>描述: 查找模型中的文本，并返回查找结果。该方法接受五个参数，分别是要查找的字符串、是否仅在可编辑范围内查找、是否使用正则表达式进行查找、是否区分大小写以及单词分隔符。该方法返回一个 IFindMatch 类型的数组，其中包含查找结果。</li></ul><p>以下是一个示例代码，演示如何使用 findMatches 方法查找模型中的文本：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">editor</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">monaco</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">editor</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementById</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;container&quot;</span><span style="color:#D4D4D4;">), {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">value:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Hello, world!&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">language:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;javascript&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">model</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">editor</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getModel</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">searchString</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;world&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">searchOnlyEditableRange</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;">constisRegex</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">matchCase</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">wordSeparators</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">matches</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">model</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">findMatches</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">searchString</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">searchOnlyEditableRange</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">isRegex</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">matchCase</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">wordSeparators</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">matches</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们首先创建了一个编辑器实例，并获取了其模型。然后，我们定义了要查找的字符串、是否仅在可编辑范围内查找、是否使用正则表达式进行查找、是否区分大小写以及单词分隔符。最后，我们使用 <code>findMatches</code> 方法查找模型中的文本，并将返回的查找结果打印到控制台中。</p><p>需要注意的是，<code>findMatches</code> 方法返回的 <code>IFindMatch</code> 类型的数组包含查找结果的位置和匹配项。如果没有找到匹配项，该数组将为空。</p><h2 id="findnextmatch" tabindex="-1"><a class="header-anchor" href="#findnextmatch" aria-hidden="true">#</a> findNextMatch</h2><ul><li><p>语法 <code>findNextMatch(previousMatch: IFindMatch, searchString: string, searchOnlyEditableRange: boolean, isRegex: boolean, matchCase: boolean, wordSeparators: string | null): IFindMatch | null</code></p></li><li><p>参数</p><ul><li><code>previousMatch</code>: <code>IFindMatch</code> 类型，表示上一个匹配项。</li><li><code>searchString</code>: <code>string</code> 类型，表示要查找的字符串。</li><li><code>searchOnlyEditableRange</code>: <code>boolean</code> 类型，表示是否仅在可编辑范围内查找。</li><li><code>isRegex</code>: <code>boolean</code> 类型，表示是否使用正则表达式进行查找。</li><li><code>matchCase</code>: <code>boolean</code> 类型，表示是否区分大小写。</li><li><code>wordSeparators</code>: <code>string | null</code> 类型，表示单词分隔符。</li></ul></li><li><p>返回值 <code>IFindMatch | null</code> 类型，表示下一个匹配项。</p></li><li><p>描述 查找模型中的文本，并返回下一个匹配项。该方法接受六个参数，分别是上一个匹配项、要查找的字符串、是否仅在可编辑范围内查找、是否使用正则表达式进行查找、是否区分大小写以及单词分隔符。该方法返回一个 <code>IFindMatch</code> 类型的对象，表示下一个匹配项。如果没有找到下一个匹配项，该方法将返回 <code>null</code>。</p></li></ul><p>以下是一个示例代码，演示如何使用 <code>findNextMatch</code> 方法查找模型中的文本：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">editor</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">monaco</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">editor</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementById</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;container&quot;</span><span style="color:#D4D4D4;">), {</span></span>
<span class="line"><span style="color:#9CDCFE;">value:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Hello, world!&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">language:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;javascript&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">model</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">editor</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getModel</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">searchString</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;world&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">searchOnlyEditableRange</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">isRegex</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">matchCase</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">wordSeparators</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">previousMatch</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">nextMatch</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">model</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">findNextMatch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">previousMatch</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">searchString</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">searchOnlyEditableRange</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">isRegex</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">matchCase</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">wordSeparators</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">nextMatch</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们首先创建了一个编辑器实例，并获取了其模型。然后，我们定义了要查找的字符串、是否仅在可编辑范围内查找、是否使用正则表达式进行查找、是否区分大小写以及单词分隔符。最后，我们使用 <code>findNextMatch</code> 方法查找模型中的文本，并将返回的下一个匹配项打印到控制台中。</p><p>需要注意的是，<code>findNextMatch</code> 方法返回的 <code>IFindMatch</code> 类型的对象表示下一个匹配项。如果没有找到下一个匹配项，该方法将返回 <code>null</code>。</p><h2 id="findpreviousmatch" tabindex="-1"><a class="header-anchor" href="#findpreviousmatch" aria-hidden="true">#</a> findPreviousMatch</h2><ul><li><p>语法 <code>findPreviousMatch(nextMatch: IFindMatch, searchString: string, searchOnlyEditableRange: boolean, isRegex: boolean, matchCase: boolean, wordSeparators: string | null): IFindMatch | null</code></p></li><li><p>参数</p><ul><li><code>nextMatch</code>: <code>IFindMatch</code> 类型，表示下一个匹配项。</li><li><code>searchString</code>: <code>string</code> 类型，表示要查找的字符串。</li><li><code>searchOnlyEditableRange</code>: <code>boolean</code> 类型，表示是否仅在可编辑范围内查找。</li><li><code>isRegex</code>: <code>boolean</code> 类型，表示是否使用正则表达式进行查找。</li><li><code>matchCase</code>: <code>boolean</code> 类型，表示是否区分大小写。</li><li><code>wordSeparators</code>: <code>string | null</code> 类型，表示单词分隔符。</li></ul></li><li><p>返回值 <code>IFindMatch | null</code> 类型，表示上一个匹配项。</p></li><li><p>描述 模型中的文本，并返回上一个匹配项。该方法接受六个参数，分别是下一个匹配项、要查找的字符串、是否仅在可编辑范围内查找、是否使用正则表达式进行查找、是否区分大小写以及单词分隔符。该方法返回一个 IFindMatch 类型的对象，表示上一个匹配项。如果没有找到上一个匹配项，该方法将返回 null 。</p></li></ul><p>以下是一个示例代码，演示如何使用 findPreviousMatch 方法查找模型中的文本：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">editor</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">monaco</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">editor</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementById</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;container&quot;</span><span style="color:#D4D4D4;">), {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">value:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Hello, world!&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">language:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;javascript&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">model</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">editor</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getModel</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">searchString</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;world&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">searchOnlyEditableRange</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">isRegex</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">matchCase</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">wordSeparators</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">nextMatch</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">previousMatch</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">model</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">findPreviousMatch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">nextMatch</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">searchString</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">searchOnlyEditableRange</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">isRegex</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">matchCase</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">wordSeparators</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">previousMatch</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们首先创建了一个编辑器实例，并获取了其模型。然后，我们定义了要查找的字符串、是否仅在可编辑范围内查找、是否使用正则表达式进行查找、是否区分大小写以及单词分隔符。最后，我们使用 findPreviousMatch 方法查找模型中的文本，并将返回的上一个匹配项打印到控制台中。</p><p>需要注意的是， findPreviousMatch 方法返回的 IFindMatch 类型的对象表示上一个匹配项。如果没有找到上一个匹配项，该方法将返回 null 。</p><h2 id="getalldecorations" tabindex="-1"><a class="header-anchor" href="#getalldecorations" aria-hidden="true">#</a> getAllDecorations</h2><ul><li>语法: getAllDecorations(ownerId?: number, filterOutValidation?: boolean): IModelDecoration[]</li><li>参数: ownerId , filterOutValidation</li><li>返回值: IModelDecoration[]</li><li>描述: 获取模型中的所有装饰。可以通过 ownerId 和 filterOutValidation 参数来过滤装饰。 其中， ownerId 参数是一个可选的数字，用于指定装饰的所有者。如果提供了 ownerId ，则只返回属于该所有者的装饰。 filterOutValidation 参数是一个可选的布尔值，用于指定是否过滤掉验证装饰。如果将其设置为 true ，则不会返回验证装饰。</li></ul><p>示例代码： const decorations = model.getAllDecorations(); console.log(decorations);</p><h2 id="getalternativeversionid" tabindex="-1"><a class="header-anchor" href="#getalternativeversionid" aria-hidden="true">#</a> getAlternativeVersionId</h2><ul><li>语法: getAlternativeVersionId(): number</li><li>参数: 无</li><li>返回值: number</li><li>描述: 获取模型的替代版本ID。此ID在每次编辑时都会递增。</li></ul><p>示例代码： const alternativeVersionId = model.getAlternativeVersionId(); console.log(alternativeVersionId);</p><h2 id="getcharactercountinrange" tabindex="-1"><a class="header-anchor" href="#getcharactercountinrange" aria-hidden="true">#</a> getCharacterCountInRange</h2><ul><li>语法: getCharacterCountInRange(range: IRange, eol: EndOfLinePreference): number</li><li>参数: range , eol</li><li>返回值: number</li><li>描述: 获取指定范围内的字符数量。可以通过 eol 参数来指定行尾字符的偏好。 其中， range 参数是一个 IRange 类型的对象，用于指定要计算字符数量的范围。 eol 参数是一个 EndOfLinePreference 枚举值，用于指定行尾字符的偏好。可选的值有： TextDefined （使用文本中定义的行尾字符）、 LF （使用 \\n 作为行尾字符）和 CRLF （使用 \\r\\n 作为行尾字符）。</li></ul><p>示例代码： const range = new monaco.Range(1, 1, 2, 1); const characterCount = model.getCharacterCountInRange(range, monaco.editor.EndOfLinePreference.TextDefined); console.log(characterCount);</p><h2 id="getdecorationoptions" tabindex="-1"><a class="header-anchor" href="#getdecorationoptions" aria-hidden="true">#</a> getDecorationOptions</h2><ul><li>语法: getDecorationOptions(id: string): IModelDecorationOptions | null</li><li>参数: id</li><li>返回值: IModelDecorationOptions | null</li><li>描述: 根据装饰ID获取装饰选项。如果找不到指定ID的装饰，返回 null 。 其中， id 参数是一个字符串，用于指定要获取装饰选项的装饰ID。</li></ul><p>示例代码： const decorationOptions = model.getDecorationOptions(&quot;decoration-id&quot;); console.log(decorationOptions);</p><h2 id="getdecorationrange" tabindex="-1"><a class="header-anchor" href="#getdecorationrange" aria-hidden="true">#</a> getDecorationRange</h2><ul><li>语法: getDecorationRange(id: string): Range | null</li><li>参数: id</li><li>返回值: Range | null</li><li>描述: 根据装饰ID获取装饰范围。如果找不到指定ID的装饰，返回 null 。 其中， id 参数是一个字符串，用于指定要获取装饰范围的装饰ID。</li></ul><p>示例代码： const decorationRange = model.getDecorationRange(&quot;decoration-id&quot;); console.log(decorationRange);</p><h2 id="getdecorationsinrange" tabindex="-1"><a class="header-anchor" href="#getdecorationsinrange" aria-hidden="true">#</a> getDecorationsInRange</h2><ul><li>语法: getDecorationsInRange(range: IRange, ownerId?: number, filterOutValidation?: boolean): IModelDecoration[]</li><li>参数: range , ownerId , filterOutValidation</li><li>返回值: IModelDecoration[]</li><li>描述: 获取指定范围内的装饰。可以通过 ownerId 和 filterOutValidation 参数来过滤装饰。 其中， range 参数是一个 IRange 类型的对象，用于指定要获取装饰的范围。 ownerId 参数是一个可选的数字，用于指定装饰的所有者。如果提供了 ownerId ，则只返回属于该所有者的装饰。 filterOutValidation 参数是一个可选的布尔值，用于指定是否过滤掉验证装饰。如果将其设置为 true ，则不会返回验证装饰。</li></ul><p>示例代码： const range = new monaco.Range(1, 1, 2, 1); const decorations = model.getDecorationsInRange(range); console.log(decorations);</p><h2 id="geteol" tabindex="-1"><a class="header-anchor" href="#geteol" aria-hidden="true">#</a> getEOL</h2><ul><li>语法: getEOL(): string</li><li>参数: 无</li><li>返回值: string</li><li>描述: 获取当前模型的行结束符。行结束符是用于分隔文本中各行的字符，通常为 \\n （UNIX风格）或 \\r\\n （Windows风格）。</li></ul><h2 id="getendoflinesequence" tabindex="-1"><a class="header-anchor" href="#getendoflinesequence" aria-hidden="true">#</a> getEndOfLineSequence</h2><ul><li>语法: getEndOfLineSequence(): string</li><li>参数: 无</li><li>返回值: string</li><li>描述: 获取当前模型的行结束符序列。</li></ul><h2 id="getfullmodelrange" tabindex="-1"><a class="header-anchor" href="#getfullmodelrange" aria-hidden="true">#</a> getFullModelRange</h2><ul><li>语法: getFullModelRange(): IRange</li><li>参数: 无</li><li>返回值: IRange</li><li>描述: 获取模型的完整范围，即从第一行的第一个字符到最后一行的最后一个字符的范围。</li></ul><h2 id="getinjectedtextdecorations" tabindex="-1"><a class="header-anchor" href="#getinjectedtextdecorations" aria-hidden="true">#</a> getInjectedTextDecorations</h2><ul><li>语法: getInjectedTextDecorations(lineNumber: number): IModelDecoration[]</li><li>参数: lineNumber</li><li>返回值: IModelDecoration[]</li><li>描述: 获取指定行的注入文本装饰。 lineNumber 参数是一个数字，表示要获取注入文本装饰的行号。</li></ul><h2 id="getlanguageid" tabindex="-1"><a class="header-anchor" href="#getlanguageid" aria-hidden="true">#</a> getLanguageId</h2><ul><li>语法: getLanguageId(): string</li><li>参数: 无</li><li>返回值: string</li><li>描述: 获取模型的语言ID。</li></ul><h2 id="getlinecontent" tabindex="-1"><a class="header-anchor" href="#getlinecontent" aria-hidden="true">#</a> getLineContent</h2><ul><li>语法: getLineContent(lineNumber: number): string</li><li>参数: lineNumber</li><li>返回值: string</li><li>描述: 获取指定行的内容。 lineNumber 参数是一个数字，表示要获取内容的行号。</li></ul><h2 id="getlinecount" tabindex="-1"><a class="header-anchor" href="#getlinecount" aria-hidden="true">#</a> getLineCount</h2><ul><li>语法: getLineCount(): number</li><li>参数: 无</li><li>返回值: number</li><li>描述: 获取模型的行数。</li></ul><h2 id="getlinedecorations" tabindex="-1"><a class="header-anchor" href="#getlinedecorations" aria-hidden="true">#</a> getLineDecorations</h2><ul><li>语法: getLineDecorations(lineNumber: number): IModelDecoration[]</li><li>参数: lineNumber</li><li>返回值: IModelDecoration[]</li><li>描述: 获取指定行的装饰。 lineNumber 参数是一个数字，表示要获取装饰的行号。</li></ul><h2 id="getlinefirstnonwhitespacecolumn" tabindex="-1"><a class="header-anchor" href="#getlinefirstnonwhitespacecolumn" aria-hidden="true">#</a> getLineFirstNonWhitespaceColumn</h2><ul><li>语法: getLineFirstNonWhitespaceColumn(lineNumber: number): number</li><li>参数: lineNumber</li><li>返回值: number</li><li>描述: 获取指定行的第一个非空白字符的列号。 lineNumber 参数是一个数字，表示要获取列号的行号。</li></ul><h2 id="getlinelastnonwhitespacecolumn" tabindex="-1"><a class="header-anchor" href="#getlinelastnonwhitespacecolumn" aria-hidden="true">#</a> getLineLastNonWhitespaceColumn</h2><ul><li>语法: getLineLastNonWhitespaceColumn(lineNumber: number): number</li><li>参数: lineNumber</li><li>返回值: number</li><li>描述: 获取指定行的最后一个非空白字符的列号。 lineNumber 参数是一个数字，表示要获取列号的行号。</li></ul><h2 id="getlinelength" tabindex="-1"><a class="header-anchor" href="#getlinelength" aria-hidden="true">#</a> getLineLength</h2><ul><li>语法: getLineLength(lineNumber: number): number</li><li>参数: lineNumber</li><li>返回值: number</li><li>描述: 获取指定行的长度。 lineNumber 参数是一个数字，表示要获取长度的行号。</li></ul><h2 id="getlinemaxcolumn" tabindex="-1"><a class="header-anchor" href="#getlinemaxcolumn" aria-hidden="true">#</a> getLineMaxColumn</h2><ul><li>语法: getLineMaxColumn(lineNumber: number): number</li><li>参数: lineNumber</li><li>返回值: number</li><li>描述: 获取指定行的最大列号。 lineNumber 参数是一个数字，表示要获取列号的行号。</li></ul><h2 id="getlinemincolumn" tabindex="-1"><a class="header-anchor" href="#getlinemincolumn" aria-hidden="true">#</a> getLineMinColumn</h2><ul><li>语法: getLineMinColumn(lineNumber: number): number</li><li>参数: lineNumber</li><li>返回值: number</li><li>描述: 获取指定行的最小列号。 lineNumber 参数是一个数字，表示要获取列号的行号。</li></ul><h2 id="getlinescontent" tabindex="-1"><a class="header-anchor" href="#getlinescontent" aria-hidden="true">#</a> getLinesContent</h2><ul><li>语法: getLinesContent(): string[]</li><li>参数: 无</li><li>返回值: string[]</li><li>描述: 获取模型的所有行的内容。</li></ul><h2 id="getlinesdecorations" tabindex="-1"><a class="header-anchor" href="#getlinesdecorations" aria-hidden="true">#</a> getLinesDecorations</h2><ul><li>语法: getLinesDecorations(startLineNumber: number, endLineNumber: number): IModelDecoration[]</li><li>参数: startLineNumber , endLineNumber</li><li>返回值: IModelDecoration[]</li><li>描述: 获取指定行范围内的装饰。 startLineNumber 和 endLineNumber 参数分别表示要获取装饰的起始行号和结束行号。</li></ul><h2 id="getoffsetat" tabindex="-1"><a class="header-anchor" href="#getoffsetat" aria-hidden="true">#</a> getOffsetAt</h2><ul><li>语法: getOffsetAt(position: IPosition): number</li><li>参数: position</li><li>返回值: number</li><li>描述: 获取指定位置的偏移量。 position 参数是一个 IPosition 类型，表示要获取偏移量的位置。</li></ul><h2 id="getoptions" tabindex="-1"><a class="header-anchor" href="#getoptions" aria-hidden="true">#</a> getOptions</h2><ul><li>语法: getOptions(): TextModelResolvedOptions</li><li>参数: 无</li><li>返回值: TextModelResolvedOptions</li><li>描述: 获取模型的选项。</li></ul><h2 id="getoverviewrulerdecorations" tabindex="-1"><a class="header-anchor" href="#getoverviewrulerdecorations" aria-hidden="true">#</a> getOverviewRulerDecorations</h2><ul><li>语法: getOverviewRulerDecorations(ownerId: number): IModelDecoration[]</li><li>参数: ownerId</li><li>返回值: IModelDecoration[]</li><li>描述: 获取属于指定所有者的概览标尺装饰。 ownerId 参数是一个数字，表示装饰的所有者ID。</li></ul><h2 id="getoffsetat-1" tabindex="-1"><a class="header-anchor" href="#getoffsetat-1" aria-hidden="true">#</a> getOffsetAt</h2><ul><li>语法: getOffsetAt(position: IPosition): number</li><li>参数: position</li><li>返回值: number</li><li>描述: 用于获取给定位置的偏移量。 position 参数是一个 IPosition 类型，表示要获取偏移量的位置。</li></ul><h2 id="getoptions-1" tabindex="-1"><a class="header-anchor" href="#getoptions-1" aria-hidden="true">#</a> getOptions</h2><ul><li>语法: getOptions(): ITextModelResolvedOptions</li><li>参数: 无</li><li>返回值: ITextModelResolvedOptions</li><li>描述: 用于获取模型的选项。</li></ul><h2 id="getoverviewrulerdecorations-1" tabindex="-1"><a class="header-anchor" href="#getoverviewrulerdecorations-1" aria-hidden="true">#</a> getOverviewRulerDecorations</h2><ul><li>语法: getOverviewRulerDecorations(ownerId: number, filterOutValidation: boolean): IModelDecoration[]</li><li>参数: ownerId , filterOutValidation</li><li>返回值: IModelDecoration[]</li><li>描述: 用于获取概览标尺装饰。 ownerId 参数是一个 number 类型，表示装饰的所有者ID。 filterOutValidation 参数是一个 boolean 类型，表示是否过滤掉验证装饰。</li></ul><h2 id="getpositionat" tabindex="-1"><a class="header-anchor" href="#getpositionat" aria-hidden="true">#</a> getPositionAt</h2><ul><li>语法: getPositionAt(offset: number): IPosition</li><li>参数: offset</li><li>返回值: IPosition</li><li>描述: 用于获取给定偏移量的位置。 offset 参数是一个 number 类型，表示要获取位置的偏移量。</li></ul><h2 id="getvalue" tabindex="-1"><a class="header-anchor" href="#getvalue" aria-hidden="true">#</a> getValue</h2><ul><li>语法: getValue(options?: { preserveBOM: boolean; eol: string }): string</li><li>参数: options</li><li>返回值: string</li><li>描述: 用于获取模型的值。 options 参数是一个对象，包含两个可选属性： preserveBOM 和 eol 。</li></ul><h2 id="getvalueinrange" tabindex="-1"><a class="header-anchor" href="#getvalueinrange" aria-hidden="true">#</a> getValueInRange</h2><ul><li>语法: getValueInRange(range: IRange, eol?: string): string</li><li>参数: range , eol</li><li>返回值: string</li><li>描述: 用于获取指定范围内的值。 range 参数是一个 IRange 类型，表示要获取值的范围。 eol 参数是一个可选的 string 类型，表示行结束符。</li></ul><h2 id="getvaluelength" tabindex="-1"><a class="header-anchor" href="#getvaluelength" aria-hidden="true">#</a> getValueLength</h2><ul><li>语法: getValueLength(options?: { preserveBOM: boolean; eol: string }): number</li><li>参数: options</li><li>返回值: number</li><li>描述: 用于获取模型值的长度。 options 参数是一个对象，包含两个可选属性： preserveBOM 和 eol 。</li></ul><h2 id="getvaluelengthinrange" tabindex="-1"><a class="header-anchor" href="#getvaluelengthinrange" aria-hidden="true">#</a> getValueLengthInRange</h2><ul><li>语法: getValueLengthInRange(range: IRange, eol?: string): number</li><li>参数: range , eol</li><li>返回值: number</li><li>描述: 用于获取指定范围内的值的长度。 range 参数是一个 IRange 类型，表示要获取值长度的范围。 eol 参数是一个可选的 string 类型，表示行结束符。</li></ul><h2 id="getversionid" tabindex="-1"><a class="header-anchor" href="#getversionid" aria-hidden="true">#</a> getVersionId</h2><ul><li>语法: getVersionId(): number</li><li>参数: 无</li><li>返回值: number</li><li>描述: 用于获取模型的版本ID。</li></ul><h2 id="getwordatposition" tabindex="-1"><a class="header-anchor" href="#getwordatposition" aria-hidden="true">#</a> getWordAtPosition</h2><ul><li>语法: getWordAtPosition(position: IPosition): IWordAtPosition</li><li>参数: position</li><li>返回值: IWordAtPosition</li><li>描述: 用于获取给定位置的单词。该方法接受一个位置对象作为参数，并返回一个 IWordAtPosition 对象，其中包含单词的名称、起始列和结束列。如果给定位置不包含单词，则返回 null 。</li></ul><p>其中， position 参数是一个 IPosition 类型的对象，用来描述位置。它包含以下属性：</p><ul><li>lineNumber: number 类型，表示行号。</li><li>column: number 类型，表示列号。</li></ul><p>以下是一个示例代码，演示如何使用 getWordAtPosition 方法获取给定位置的单词：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">editor</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">monaco</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">editor</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementById</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;container&quot;</span><span style="color:#D4D4D4;">), {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">value:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;function helloWorld() {</span><span style="color:#D7BA7D;">\\n</span><span style="color:#CE9178;">    console.log(&#39;Hello, world!&#39;);</span><span style="color:#D7BA7D;">\\n</span><span style="color:#CE9178;">}&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">language:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;javascript&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">position</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">lineNumber:</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">column:</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">9</span><span style="color:#D4D4D4;"> }; </span><span style="color:#6A9955;">// 获取第一行第九列的单词</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">word</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">editor</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getModel</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">getWordAtPosition</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">position</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">word</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 输出：{ word: &#39;helloWorld&#39;, startColumn: 9, endColumn: 19 }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们创建了一个 monaco-editor 实例，并在其中输入了一段 JavaScript 代码。然后，我们使用 getWordAtPosition 方法获取第一行第九列的单词，并将结果输出到控制台。</p><p>getWordAtPosition 方法返回一个对象，其中包含单词的名称、起始列和结束列。如果给定位置不包含单词，则返回 null 。</p><h2 id="getworduntilposition" tabindex="-1"><a class="header-anchor" href="#getworduntilposition" aria-hidden="true">#</a> getWordUntilPosition</h2><ul><li>语法: getWordUntilPosition(position: IPosition): IWordAtPosition</li><li>参数: position</li><li>返回值: IWordAtPosition</li><li>描述: 用于获取给定位置之前的单词。该方法接受一个位置对象作为参数，并返回一个 IWordAtPosition 对象，其中包含单词的名称、起始列和结束列。如果给定位置之前没有单词，则返回 null 。</li></ul><h2 id="isattachedtoeditor" tabindex="-1"><a class="header-anchor" href="#isattachedtoeditor" aria-hidden="true">#</a> isAttachedToEditor</h2><ul><li>语法: isAttachedToEditor(): boolean</li><li>参数: 无</li><li>返回值: boolean</li><li>描述: 用于检查模型是否附加到编辑器。如果模型已附加到编辑器，则返回 true ，否则返回 false 。</li></ul><h2 id="isdisposed" tabindex="-1"><a class="header-anchor" href="#isdisposed" aria-hidden="true">#</a> isDisposed</h2><ul><li>语法: isDisposed(): boolean</li><li>参数: 无</li><li>返回值: boolean</li><li>描述: 用于检查模型是否已被销毁。如果模型已被销毁，则返回 true ，否则返回 false 。</li></ul><h2 id="modifyposition" tabindex="-1"><a class="header-anchor" href="#modifyposition" aria-hidden="true">#</a> modifyPosition</h2><ul><li>语法: modifyPosition(position: IPosition, offset: number): IPosition</li><li>参数: position , offset</li><li>返回值: IPosition</li><li>描述: 用于修改给定位置的列。该方法接受一个位置对象和一个偏移量作为参数，并返回一个新的位置对象，其中列已根据偏移量进行了修改。</li></ul><h2 id="normalizeindentation" tabindex="-1"><a class="header-anchor" href="#normalizeindentation" aria-hidden="true">#</a> normalizeIndentation</h2><ul><li>语法: normalizeIndentation(str: string): string</li><li>参数: str</li><li>返回值: string</li><li>描述: 用于将字符串中的制表符和空格转换为适当的缩进。该方法接受一个字符串作为参数，并返回一个新的字符串，其中制表符和空格已被转换为适当的缩进。</li></ul><h2 id="ondidchangecontent" tabindex="-1"><a class="header-anchor" href="#ondidchangecontent" aria-hidden="true">#</a> onDidChangeContent</h2><ul><li>语法: onDidChangeContent(listener: (e: IModelContentChangedEvent) =&gt; void): IDisposable</li><li>参数: listener</li><li>返回值: IDisposable</li><li>描述: 用于在模型内容发生更改时触发一个事件。该方法接受一个事件监听器作为参数，并返回一个 IDisposable 对象，用于取消事件监听。</li></ul><h2 id="popstackelement" tabindex="-1"><a class="header-anchor" href="#popstackelement" aria-hidden="true">#</a> popStackElement</h2><ul><li>语法: popStackElement(): void</li><li>参数: 无</li><li>返回值: 无</li><li>描述: 用于从撤销/重做堆栈中弹出一个元素。</li></ul><h2 id="pusheol" tabindex="-1"><a class="header-anchor" href="#pusheol" aria-hidden="true">#</a> pushEOL</h2><ul><li>语法: pushEOL(eol: EndOfLineSequence): void</li><li>参数: eol</li><li>返回值: 无</li><li>描述: 用于将一个换行符推送到模型的末尾。该方法接受一个 EndOfLineSequence 枚举值作为参数。</li></ul><h2 id="pusheditoperations" tabindex="-1"><a class="header-anchor" href="#pusheditoperations" aria-hidden="true">#</a> pushEditOperations</h2><ul><li>语法: pushEditOperations(beforeCursorState: Selection[], editOperations: IIdentifiedSingleEditOperation[], cursorStateComputer: ICursorStateComputer): Selection[]</li><li>参数: beforeCursorState , editOperations , cursorStateComputer</li><li>返回值: Selection[]</li><li>描述: 用于将一组编辑操作推送到模型。该方法接受三个参数：一个选择对象数组，一个编辑操作数组，以及一个计算光标状态的函数。方法返回一个新的选择对象数组，表示在编辑操作应用后的光标状态。</li></ul><h2 id="pushstackelement" tabindex="-1"><a class="header-anchor" href="#pushstackelement" aria-hidden="true">#</a> pushStackElement</h2><ul><li>语法: pushStackElement(): void</li><li>参数: 无</li><li>返回值: 无</li><li>描述: 用于将一个元素推送到撤销/重做堆栈中。</li></ul><h2 id="seteol" tabindex="-1"><a class="header-anchor" href="#seteol" aria-hidden="true">#</a> setEOL</h2><ul><li>语法: setEOL(eol: EndOfLineSequence): void</li><li>参数: eol</li><li>返回值: 无</li><li>描述: 用于设置模型的换行符。该方法接受一个 EndOfLineSequence 枚举值作为参数。</li></ul><h2 id="setvalue" tabindex="-1"><a class="header-anchor" href="#setvalue" aria-hidden="true">#</a> setValue</h2><ul><li>语法: setValue(newValue: string): void</li><li>参数: newValue</li><li>返回值: 无</li><li>描述: 用于设置模型的内容。该方法接受一个字符串作为参数，表示新的模型内容。</li></ul><h2 id="updateoptions" tabindex="-1"><a class="header-anchor" href="#updateoptions" aria-hidden="true">#</a> updateOptions</h2><ul><li>语法: updateOptions(newOpts: ITextModelUpdateOptions): void</li><li>参数: newOpts</li><li>返回值: 无</li><li>描述: 用于更新模型的选项。该方法接受一个 ITextModelUpdateOptions 对象作为参数，其中包含要更新的选项。</li></ul><h2 id="validateposition" tabindex="-1"><a class="header-anchor" href="#validateposition" aria-hidden="true">#</a> validatePosition</h2><ul><li>语法: validatePosition(position: IPosition): IPosition</li><li>参数: position</li><li>返回值: IPosition</li><li>描述: 用于验证给定位置是否有效。如果位置无效，则返回一个修正后的有效位置。</li></ul><h2 id="validaterange" tabindex="-1"><a class="header-anchor" href="#validaterange" aria-hidden="true">#</a> validateRange</h2><ul><li>语法: validateRange(range: IRange): IRange</li><li>参数: range</li><li>返回值: IRange</li><li>描述: 用于验证给定范围是否有效。如果范围无效，则返回一个修正后的有效范围。</li></ul>`,154),i=[o];function t(p,r){return n(),l("div",null,i)}const d=s(e,[["render",t],["__file","ITextModel.html.vue"]]);export{d as default};
